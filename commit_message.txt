refactor(verifiers): Enhance modularity, robustness, and testability

This commit introduces a significant refactoring of the `verifiers` and `validators` modules to improve their robustness, modularity, and maintainability. The changes focus on hardening the verification process, improving error handling, and increasing portability.

- **`verifiers.sh` Refactoring:**
  - **Modularity:** The module is broken down into smaller, single-responsibility functions (e.g., `_verify_checksum_with_hooks`, `_perform_gpg_verification`, `_download_signature_file`). This improves readability and simplifies testing.
  - **Robustness:**
    - **Dependency Checks:** The module now performs an upfront check for required command-line tools (e.g., `jq`, `awk`, `gpg`), failing fast if a dependency is missing.
    - **Safe Cleanup:** A `trap` is used to ensure that temporary files are cleaned up, even if the script exits unexpectedly.
    - **Safer Hooks:** Hook triggering is now more robust, with better error handling and logging.
  - **Portability:** The `_lower` function is now used for case-insensitive comparisons, making the script more portable (e.g., to macOS's older bash version).
  - **Checksum Extraction:** The `extract_checksum_from_file` function is now more flexible, supporting SHA-256, SHA-512, and falling back to the first available hex digest.

- **`validators.sh` Refactoring:**
  - **Stricter Validation:** The URL and file path validation functions have been improved with stricter regular expressions to prevent common security vulnerabilities.
  - **Improved Semver:** The `check_semver_format` function now uses a more accurate regular expression for semantic versioning.
  - **Clarity:** The module's responsibilities and usage examples have been updated for better clarity.

- **Code Relocation:**
  - `networks.sh` has been moved from `src/core` to `src/lib` to better reflect its role as a library module. The import path in `src/core/init/runtime.sh` has been updated accordingly.