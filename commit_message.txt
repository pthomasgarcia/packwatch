refactor(updates)!: Modularize updates module for improved maintainability and testability

This commit undertakes a significant refactoring of the `updates` module, breaking down the monolithic `updates.sh` script into smaller, more focused, and testable components. This enhances code organization, reduces complexity, and lays the groundwork for more robust feature development and testing.

- **Modular Structure:**
  - The `src/core/updates/` directory is introduced to house specialized scripts for each update type (e.g., `github.sh`, `direct_download.sh`, `appimage.sh`, `flatpak.sh`, `script.sh`, `custom.sh`).
  - Common update-related utilities are consolidated into `common.sh` and `validation.sh`.
  - `updates.sh` now acts as a central orchestrator, sourcing these modules and managing the overall update flow.

- **Relocated and Refined Logic:**
  - All type-specific update checking and installation logic has been moved to their respective new modules.
  - `updates::process_installation` (now in `common.sh`) is enhanced with better installed version handling and `sudo` session checks.
  - `updates::handle_custom_check` (now in `custom.sh`) gains improved custom checker script path resolution, robust JSON output validation, and explicit parameter validation for various install types.
  - `updates::trigger_hooks` is updated to use safer nameref iteration.

- **Enhanced Testing:**
  - A comprehensive test suite (`tests/test_updates.sh`) is introduced, leveraging extensive mocking to validate the behavior of the refactored `updates` module across various scenarios (e.g., dry runs, update availability, error handling).
  - New `assert_contains` and `assert_not_contains` helpers are added to `tests/test_helpers.sh` for more flexible assertion capabilities.

- **Improved User Experience & Robustness:**
  - Download progress reporting (`_format_bytes`, `on_download_progress` in `common.sh`) is made more robust.
  - Configuration validation for `direct_download` type is strengthened.
  - New public hook: `updates::on_download_complete()` â€” invoked when a download completes.

BREAKING CHANGE: The internal structure of the `updates` module has been completely reorganized. Direct calls to functions previously defined in `updates.sh` that have been moved to sub-modules will now fail if `updates.sh` is not sourced or if the functions are not properly exposed. This change primarily affects internal development and testing, requiring updates to any scripts or tests that directly interact with these moved functions without going through the `updates.sh` orchestrator.
