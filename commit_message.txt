refactor(checkers): Improve robustness and caching

This commit introduces several improvements to the custom checkers, focusing on robustness, caching, and code clarity.

- **Centralized Hashing:**
  - A new `hash_utils.sh` module has been created to provide a centralized function for generating hashes. This module uses `sha256sum`, `shasum`, or `md5sum` to create a hash of a string.
  - All custom checkers have been updated to use this new module for generating cache keys, ensuring a consistent and reliable caching mechanism.

- **Improved Checker Logic:**
  - The custom checkers (`cursor.sh`, `veracrypt.sh`, `warp.sh`, `zed.sh`) have been refactored to be more robust and efficient.
  - The logic for retrieving and validating required fields from the cache has been improved.
  - The handling of install paths and home directories has been made more robust.
  - The `veracrypt.sh` checker now has an early exit if the app is up-to-date, preventing unnecessary URL searches.
  - The `zed.sh` checker now handles errors from `packages::get_installed_version` more gracefully.

- **Code Cleanup:**
  - The `first_alive_url` function has been removed from `networks.sh` as it was no longer in use.